// This build script is based on https://github.com/GradleFx/GradleFx/blob/master/build.gradle

archivesBaseName = 'perlock-core'

apply plugin: 'maven'
apply plugin: 'signing'

ext.packaging = 'jar'

def isDevBuild
def isCiBuild
def isReleaseBuild

def sonatypeRepositoryUrl

//set build variables based on build type
if(hasProperty("release")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("ci")) {
    isCiBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    isDevBuild = true
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Perlock Path Watcher",
                "Implementation-Version": version,
                "Author": "Daniel Mitterdorfer <daniel@mitterdorfer.name>",
        )
    }
}

task coreJavadocs(type: Javadoc, dependsOn: javadoc) {
    //otherwise no documentation is created at all
    source = sourceSets.main.allJava
    classpath = configurations.compile
    //exclude the impl package as it only consists of internal implementation classes which should not be used by clients
    //TODO: Figure out how to exclude this package without getting build warnings
    //excludes = ["**/impl/**"] as Set
}


task javadocJar(type: Jar, dependsOn: coreJavadocs) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

//********* artifact signing *********
if(isReleaseBuild) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

uploadArchives {
    repositories {
        if (isDevBuild) {
            mavenLocal()
        }
        else {
            mavenDeployer {
                if(isReleaseBuild) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'Perlock'
                    packaging 'jar'
                    description 'Perlock (short for Path Sherlock) provides a simple and sane path watching API on top of the JDK 7 WatchService API'
                    url 'https://github.com/danielmitterdorfer/perlock'

                    scm {
                        url 'scm:git@github.com:danielmitterdorfer/perlock.git'
                        connection 'scm:git@github.com:danielmitterdorfer/perlock.git'
                        developerConnection 'scm:git@github.com:danielmitterdorfer/perlock.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'danielmitterdorfer'
                            name 'Daniel Mitterdorfer'
                        }
                    }
                }
            }
        }
    }
}



